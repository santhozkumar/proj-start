// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: folder.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (
    name, description, created_by
) VALUES (
 $1, $2, $3
)
RETURNING id, created_at
`

type CreateFolderParams struct {
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
	CreatedBy   uuid.NullUUID  `db:"created_by" json:"createdBy"`
}

type CreateFolderRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (CreateFolderRow, error) {
	row := q.db.QueryRowContext(ctx, createFolder, arg.Name, arg.Description, arg.CreatedBy)
	var i CreateFolderRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getFoldersForUser = `-- name: GetFoldersForUser :many
SELECT id, created_at, updated_at, name, description, created_by FROM folders
WHERE created_by = $1
`

func (q *Queries) GetFoldersForUser(ctx context.Context, createdBy uuid.NullUUID) ([]Folder, error) {
	rows, err := q.db.QueryContext(ctx, getFoldersForUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
